#!/bin/bash

# Variables
SCRIPT_DIR="$PWD"
REMOTE_HOST="pi5.asuscomm.com"
REMOTE_PORT="2221"
REMOTE_USER="skywalker"
REMOTE_PASSWORD='\$qLHmo55Z+30' # Properly quoted to handle special characters
REMOTE=false

# Ensure the script is executed from the correct directory
cd "$SCRIPT_DIR"

# Configuring Git user name and email globally
git config --global user.name "Alexander La Barge"
git config --global user.email "alex@labarge.dev"

# Install the aarch64-unknown-linux-gnu toolchain and add target
rustup target add aarch64-unknown-linux-gnu

# Install the AArch64 cross-compiler (Debian/Ubuntu)
sudo apt-get install gcc-aarch64-linux-gnu sshpass -y

# Remove existing configuration files to avoid conflicts
rm -f ~/.cargo/config ~/.cargo/config.toml

# Set up the linker for cross-compilation in Cargo config.toml
mkdir -p ~/.cargo
CARGO_CONFIG=~/.cargo/config.toml

# Add the target configuration
echo "[target.aarch64-unknown-linux-gnu]" >> $CARGO_CONFIG
echo 'linker = "aarch64-linux-gnu-gcc"' >> $CARGO_CONFIG

# Function to tally lines of code for Rust files
function tally_lines_of_code() {
    local total_lines=$(find . -name "*.rs" -print0 | xargs -0 wc -l | tail -n 1 | awk '{print $1}')
    echo "Total lines of Rust code: $total_lines"
}

# Tally lines of code before building
echo "Tallying lines of code before building..."
tally_lines_of_code

# Building the project using Cargo for the release profile and target architecture
echo "Building the project for amd64..."
cargo build --release

echo "Building the project for arm64..."
cargo build --release --target=aarch64-unknown-linux-gnu

# Moving the compiled binaries to the current directory with appropriate names
mv target/release/pi_installer pi_installer_amd64
mv target/aarch64-unknown-linux-gnu/release/pi_installer pi_installer_arm64

# Tally lines of code after building
echo "Tallying lines of code after building..."
tally_lines_of_code

# Function to copy the binary to the remote system
function copy_to_remote() {
    local remote_user=$1
    local remote_host=$2
    local remote_port=$3
    local remote_password=$4
    local binary_path=$5

    echo "Copying the binary to the remote system..."
    sshpass -p "$remote_password" scp -P "$remote_port" "$binary_path" "$remote_user@$remote_host:/home/$remote_user/"
}

# Function to run the binary on the remote system
function run_remote_installer() {
    local remote_user=$1
    local remote_host=$2
    local remote_port=$3
    local remote_password=$4
    local installer_binary=$5
    local installer_params="${@:6}"

    echo "Executing the installer on the remote system..."
    sshpass -p "$remote_password" ssh -p "$remote_port" -o StrictHostKeyChecking=no "$remote_user@$remote_host" "cd /home/$remote_user && sudo ./$installer_binary $installer_params"
}

# Check for the --remote argument
if [[ " $@ " =~ " --remote " ]]; then
    REMOTE=true
    echo "Remote execution enabled."
fi

if $REMOTE; then
    # Copy the binary to the remote system
    copy_to_remote "$REMOTE_USER" "$REMOTE_HOST" "$REMOTE_PORT" "$REMOTE_PASSWORD" "./pi_installer_arm64"

    # Run the installer on the remote system
    run_remote_installer "$REMOTE_USER" "$REMOTE_HOST" "$REMOTE_PORT" "$REMOTE_PASSWORD" "pi_installer_arm64" "${@:1:$#-1}"
else
    # Testing the pi_installer with sudo and --help for the detected architecture
    ARCH=$(uname -m)

    if [ "$ARCH" = "x86_64" ]; then
        echo "Testing the help function for amd64..."
        sudo ./pi_installer_amd64 --help
    elif [ "$ARCH" = "aarch64" ]; then
        echo "Testing the help function for arm64..."
        sudo ./pi_installer_arm64 --help
    else
        echo "Unsupported architecture: $ARCH"
        exit 1
    fi
fi
